api_content
test_find <- fromJSON(api_content$query$pages$`616250`$revisions[[1]]$slots$main$`*`)
view(test_find)
test_find$participants$stats
api_content$'*'
api_content[[1]]
api_content[[2]]
api_content[[2]]["*"]
api_content[[2]][1]
api_content[[3]]
api_content[[2]][[2]]
api_content[[2]][[1]]
x <- lapply(api_content, '[[',2)
x <- lapply(api_content, '[[',1)
x
test_find <- fromJSON(api_content$query$pages$`616250`$revisions[[1]]$slots$main$`*`, flatten = TRUE)
view(test_find)
x <- hoist(api_content, "*")
x <- hoist(tibble(api_content), "*")
x <- hoist(data.frame(api_content), "*")
x <- data.frame(api_content)
x
y <- hoist(x, ".")
view(x)
colnames(x)
y <- fromJSON(x$query.pages.616250.revisions.slots.main.., flatten = TRUE)
view(y)
colnames(x)[-1]
?colnames
z <- colnames(x)
z
z[-1]
class(z)
tail(z, n=1)
test_names <- x[colnames(x) %like% ".main.."]
match_api_data$headers
match_api_data$url
test_url <- fromJSON(match_api_data$url)
test_url
api_content <- content(match_api_data, flatten = T)
api_content <- content(match_api_data)
test_url <- fromJSON(match_api_data$url, flatten = T)
test_url
class(test_url)
api_content <- content(match_api_data)
api_content
# more tests
testing <- api_content$query
testing_1 <- sapply(testing, tail, 1)
view(testing_1)
class(testing)
testing_1 <- tail(testing, n=1)
view(testing_1)
names(testing)
# more tests
testing <- api_content$query$pages
view(testing)
# more tests
testing <- api_content$query$pages
# more tests
testing <- api_content
testing
testing$query$pages$`616250`$revisions[[1]]$slots$main$`*`[2]
testing$query$pages$`616250`$revisions[[1]]$slots$main$`*`[1]
testing_1 <- unlist(testing)
testing_1
class(testing_1)
view(testing_1)
testing_1 <- data.frame(unlist(testing))
class(testing_1)
view(testing_1)
testing_1$unlist.testing.
# more tests
testing <- api_content$query
testing_1 <- data.frame(unlist(testing))
view(testing_1)
testing_1 <- data.frame(unlist(testing, recursive = FALSE))
view(testing_1)
testing_1$pages.616250.revisions.slots.main..
# more tests
testing <- api_content$query
testing_1 <- data.frame(unlist(testing))
testing_1
view(testing_1)
api_unnest <- api_content %>%
unnest_longer(query) %>%
unnest_wider(query) %>%
unnest_longer(revisions) %>%
unnest_wider(revisions) %>%
unnest_wider(slots) %>%
unnest_wider(main) %>%
unnest_longer(`*`)
view(testing_1)
# more tests
testing <- api_content$query
class(testing)
names(testing)
names(testing)[2]
names(testing)[1]
names(testing)[1][1]
names(testing)[1][1][1]
names(testing)[[1]]
t_2 <- unlist(testing)
names(t_2)
testing)
t3 <- do.call(data.frame, testing)
view(t3)
t3 <- do.call(data.frame, t_2)
t3 <- do.call(data.frame, testing$pages)
view(t3)
# more tests
testing <- api_content$query
class(testing)
testing
testing[6]
testing[[6]][1]
testing[[1]][6]
testing[[1]]
t_2 <- unlist(testing)
names(t_2)
t_2[6]
tail(t_2, n=1)
final_test <- tail(t_2, n=1)
jsn_test <- fromJSON(final_test, flatten = TRUE)
view(jsn_test)
jsn_test$gameDuration
view(jsn_test)
jsn_test$teams
# working through problems
##### Section 1: API
library(rvest)
library(tidyverse)
library(httr)
library(jsonlite)
# lets see if we can get leagues for LEC?
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short",
where = "L.League_Short = 'LEC'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# I think I might be more interested in the Tournaments table
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T",
fields = "T.Name, T.OverviewPage, T.League",
where = "T.League = 'LoL EMEA Championship'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# getting the league of interest
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short",
where = "L.League_Short = 'LEC'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# now get the tournements for this league
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T",
fields = "T.Name, T.OverviewPage, T.League",
where = "T.League = 'LoL EMEA Championship'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# Testing For LEC 2020 Summer SeasoN?
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship'",
join_on = "SG.OverviewPage = T.OverviewPage",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# now get the tournements for this league
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T",
fields = "T.Name, T.OverviewPage, T.League",
where = "T.League = 'LoL EMEA Championship'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# so this returns us what we are interested in, but it does not return the
# the specific league we are interested in!
# lets see if we can get that for spring 2021
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.DateTime_UTC, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage",
order_by = "SG.DateTime_UTC DESC"
format = "json"
)
# so this returns us what we are interested in, but it does not return the
# the specific league we are interested in!
# lets see if we can get that for spring 2021
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.DateTime_UTC, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage",
order_by = "SG.DateTime_UTC DESC",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.Tournament, SG.DateTime_UTC, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage",
order_by = "SG.DateTime_UTC DESC",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# so this returns us what we are interested in, but it does not return the
# the specific league we are interested in!
# lets see if we can get that for spring 2021
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG",
fields = "T.OverviewPage, SG.Tournament, SG.DateTime_UTC, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId ",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage",
order_by = "SG.DateTime_UTC",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# ok so when we order by date time we get it in the correct order. very nice.
# now we have these riotplatformgameID, can we get the neccessary info for the API?
# so now we need to include the PostgameJsonMetadata
# whats the best way to do this?
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '10',
tables = "Tournaments=T, ScoreboardGames=SG, PostgameJsonMetadata=PJ",
fields = "T.OverviewPage, SG.Tournament, SG.DateTime_UTC, SG.OverviewPage, SG.Team1, SG.Team2, SG.WinTeam, SG.RiotGameId, SG.RiotVersion, SG.RiotPlatformGameId, PJ.StatsPage",
where = "T.League = 'LoL EMEA Championship' AND T.Name = 'LEC 2021 Spring'",
join_on = "SG.OverviewPage = T.OverviewPage, SG.RiotPlatformGameId =PJ.RiotPlatformGameId",
order_by = "SG.DateTime_UTC",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial",
where = "L.IsOfficial = 'Yes'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
# obtain league and tourneys
library(rvest)
library(tidyverse)
library(httr)
library(jsonlite)
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial",
where = "L.IsOfficial = 'Yes'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, T.Level",
where = "L.IsOfficial = 'Yes' AND T.Level = 'Primary'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, T.Level",
where = "L.IsOfficial = 'Yes' AND T.Level = 'Primary'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, L.Level",
where = "L.IsOfficial = 'Yes' AND L.Level = 'Primary'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, L.Level",
where = "L.IsOfficial = 'Yes' AND L.Level = 'Primary' AND L.Region <> 'International'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
# obtain league and tourneys
library(rvest)
library(tidyverse)
library(httr)
library(jsonlite)
api_base_url <- "https://lol.fandom.com/api.php"
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, L.Level",
where = "L.IsOfficial = 'Yes' AND L.Level = 'Primary' AND L.Region <> 'International'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
view(api_content)
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, L.Level",
where = "L.IsOfficial = 'Yes' AND L.Level = 'Primary' AND L.Region <> 'International'"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
view(api_content)
query_param <- list(
action = "cargoquery",
limit = '30',
tables = "Leagues=L",
fields = "L.League, L.Region, L.League_Short, L.IsOfficial, L.Level",
where = "L.IsOfficial = 'Yes' AND L.Level = 'Primary' AND L.Region <> 'International'",
format = "json"
)
match_api_data <- GET(api_base_url, query = query_param)
api_content <- content(match_api_data)
api_content
view(api_content)
# json
fromJSON(match_api_data$url)
# json
test_json <- fromJSON(match_api_data$url)
class(test_json)
test_tibble <- as.tibble(test_json)
test_tibble <- as_tibble(test_json)
class(test_tibble)
view(test_tibble)
test_json2 <- api_content$cargoquery
view(test_json2)
test_json2 <- fromJSON(api_content$cargoquery)
test_json2 <- fromJSON(api_content$cargoquery[1])
api_content$cargoquery[1]
api_content$cargoquery[[1]]
test_json2 <- fromJSON(api_content$cargoquery[[1]])
test_json2 <- fromJSON(api_content$cargoquery[[1]]$title)
test_json2 <- fromJSON(api_content$cargoquery[[1]]$title$League)
# trying functional programming
test_purr <- map(api_content$cargoquery, as_data_frame)
# trying functional programming
test_purr <- map(api_content$cargoquery, as_tibble)
view(test_purr)
test_bind <- bind_rows(api_content$cargoquery)
view(test_bind)
names(api_content$cargoquery)
names(api_content$cargoquery[[1]]$title)
test_call <- map(api_content$cargoquery, lst_obj)
test_call <- map(api_content$cargoquery, rbind)
df <- as_tibble(test_call)
names(api_content$cargoquery[[1]]$title)
view(test_bind)
view(test_purr)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x), id="id")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x), id="title")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x), id="")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
view(test_purr2)
view(test_purr2)
# unlist
un_list <- unlist(api_content$cargoquery)
view(un_list)
colnames(test_purr2) <- str_replace(colnames(test_purr2), "\\..*","")
view(test_purr2)
colnames(test_purr2) <- str_replace(colnames(test_purr2), "..//*","")
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_replace(colnames(test_purr2), "..//*","")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_replace(colnames(test_purr2), "\\.","")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_replace(colnames(test_purr2), "\\.*","")
view(test_purr2)
colnames(test_purr2) <- str_extract(colnames(test_purr2), "\\..*")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_extract(colnames(test_purr2), "\\.*")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_extract(colnames(test_purr2), "\\..")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_extract(colnames(test_purr2), ".\\.*")
view(test_purr2)
test_purr2 <- map_df(api_content$cargoquery, ~as.data.frame(.x))
colnames(test_purr2) <- str_extract(colnames(test_purr2), '\\b\\w+$')
view(test_purr2)
# calling libraries
library(tidyverse)
library(httr)
library(jsonlite)
# API
api <- "RGAPI-eefc5a2d-d213-4943-872f-6fe1e2487d65"
console.log('Hellow World');
shiny::runApp('r projs/LoLCluster')
runApp('r projs/Data Analyst Test/Final_App')
runApp()
runApp('r projs/cluster dash/ClusterDashboard')
library(shiny)
runApp('GitHub/projectTrackerApp/TestingHTMLJS')
runApp('GitHub/projectTrackerApp/TestingHTMLJS')
runApp('GitHub/projectTrackerApp/TestingHTMLJS')
?sendCustomMessage
library(shiny)
library(vroom)
library(tidyverse)
# the scaffold
usethis::create_package("playground")
setwd("C:/Users/house/Documents/GitHub/javaScriptForR")
usethis::create_package("gio")
